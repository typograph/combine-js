// Generated by CoffeeScript 1.6.1
(function() {
  var Cell, Figure, Game, animation_delay, colors, reset_colors, upgrade_colors,
    _this = this;

  animation_delay = 50;

  colors = ['transparent', '#4be600', '#f5c800', '#dc7d19', '#dc3232', '#f050a0', '#af3cb9', '#3250ff', '#0fc3eb', '#000000', '#cdcdcd'];

  reset_colors = ['transparent', ["#6feb33", "#93f066", "#b7f599", "#dbfacc", "#ffffff"], ["#f7d333", "#f9de66", "#fbe999", "#fdf4cc", "#ffffff"], ["#e39747", "#eab175", "#f1cba3", "#f8e5d1", "#ffffff"], ["#e35b5b", "#ea8484", "#f1adad", "#f8d6d6", "#ffffff"], ["#f373b3", "#f696c6", "#f9b9d9", "#fcdcec", "#ffffff"], ["#bf63c7", "#cf8ad5", "#dfb1e3", "#efd8f1", "#ffffff"], ["#5b73ff", "#8496ff", "#adb9ff", "#d6dcff", "#ffffff"], ["#3fcfef", "#6fdbf3", "#9fe7f7", "#cff3fb", "#ffffff"], ["#333333", "#666666", "#999999", "#cccccc", "#ffffff"], ["#d7d7d7", "#e1e1e1", "#ebebeb", "#f5f5f5", "#ffffff"]];

  upgrade_colors = ['transparent', ["#6de000", "#8fda00", "#b1d400", "#d3ce00"], ["#f0b905", "#ebaa0a", "#e69b0f", "#e18c14"], ["#dc6e1e", "#dc5f23", "#dc5028", "#dc412d"], ["#e03848", "#e43e5e", "#e84474", "#ec4a8a"], ["#e34ca5", "#d648aa", "#c944af", "#bc40b4"], ["#9640c7", "#7d44d5", "#6448e3", "#4b4cf1"], ["#2b67fb", "#247ef7", "#1d95f3", "#16acef"], ["#0c9cbc", "#09758d", "#064e5e", "#03272f"], ["#292929", "#525252", "#7b7b7b", "#a4a4a4"], ["#b3d2a4", "#99d77b", "#7fdc52", "#65e129"]];

  Cell = (function() {

    function Cell(parent) {
      this.dom = document.createElement('div');
      this.dom.innerHTML = " ";
      parent.appendChild(this.dom);
      this.reset();
    }

    Cell.prototype.reset = function() {
      this.tier = 0;
      this.cluster = 0;
      return this.sync();
    };

    Cell.prototype.upgrade = function() {
      this.tier += 1;
      if (this.tier === colors.length) {
        this.tier = 1;
      }
      return this.sync();
    };

    Cell.prototype.set = function(tier) {
      this.tier = tier;
      return this.sync();
    };

    Cell.prototype.isEmpty = function() {
      return this.tier === 0;
    };

    Cell.prototype.sync = function() {
      return this.dom.style.backgroundColor = colors[this.tier];
    };

    Cell.prototype.anim_reset = function(step) {
      if (step > 3) {
        return this.reset();
      } else {
        return this.dom.style.backgroundColor = reset_colors[this.tier][step];
      }
    };

    Cell.prototype.anim_upgrade = function(step) {
      if (step > 3) {
        return this.upgrade();
      } else {
        return this.dom.style.backgroundColor = upgrade_colors[this.tier][step];
      }
    };

    return Cell;

  })();

  Figure = (function() {

    function Figure(c1, c2, row1, row2) {
      var _this = this;
      this.row1 = row1;
      this.row2 = row2;
      this.sync = function() {
        return Figure.prototype.sync.apply(_this, arguments);
      };
      this.clear = function() {
        return Figure.prototype.clear.apply(_this, arguments);
      };
      this.rotate = function() {
        return Figure.prototype.rotate.apply(_this, arguments);
      };
      this.moveRight = function() {
        return Figure.prototype.moveRight.apply(_this, arguments);
      };
      this.moveLeft = function() {
        return Figure.prototype.moveLeft.apply(_this, arguments);
      };
      this.state = [0, c2, c1];
      this.index = (this.row1.length - 1) / 2 | 0;
      this.sync();
    }

    Figure.prototype.moveLeft = function() {
      if (this.index > 0) {
        this.index -= 1;
      } else if (this.state[2] === 0) {
        this.index = -1;
      }
      return this.sync();
    };

    Figure.prototype.moveRight = function() {
      if (this.index < this.row1.length - 2) {
        this.index += 1;
      }
      return this.sync();
    };

    Figure.prototype.rotate = function() {
      if (this.state[0] === 0) {
        this.state[0] = this.state[2];
        this.state[2] = 0;
      } else {
        this.state[2] = this.state[1];
        this.state[1] = this.state[0];
        this.state[0] = 0;
        if (this.index === -1) {
          this.index = 0;
        }
      }
      return this.sync();
    };

    Figure.prototype.clear = function() {
      var cell, _i, _j, _len, _len1, _ref, _ref1, _results;
      _ref = this.row1;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        cell.reset();
      }
      _ref1 = this.row2;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        cell = _ref1[_j];
        _results.push(cell.reset());
      }
      return _results;
    };

    Figure.prototype.sync = function() {
      this.clear();
      if (this.state[0] !== 0) {
        this.row1[this.index + 1].set(this.state[0]);
      }
      this.row2[this.index + 1].set(this.state[1]);
      if (this.state[2] !== 0) {
        return this.row2[this.index].set(this.state[2]);
      }
    };

    return Figure;

  })();

  Game = (function() {

    function Game(width, height) {
      var c, ntable, r,
        _this = this;
      this.width = width;
      this.height = height;
      this.newTurn = function() {
        return Game.prototype.newTurn.apply(_this, arguments);
      };
      this.randomColor = function() {
        return Game.prototype.randomColor.apply(_this, arguments);
      };
      this.createNext = function() {
        return Game.prototype.createNext.apply(_this, arguments);
      };
      this.removeClusters = function() {
        return Game.prototype.removeClusters.apply(_this, arguments);
      };
      this.landAll = function() {
        return Game.prototype.landAll.apply(_this, arguments);
      };
      this.checkOverload = function() {
        return Game.prototype.checkOverload.apply(_this, arguments);
      };
      this.animateCollapse = function() {
        return Game.prototype.animateCollapse.apply(_this, arguments);
      };
      this.finalizeTurn = function() {
        return Game.prototype.finalizeTurn.apply(_this, arguments);
      };
      this.bringDown = function() {
        return Game.prototype.bringDown.apply(_this, arguments);
      };
      this.land = function(c, i) {
        return Game.prototype.land.apply(_this, arguments);
      };
      this.keyDown = function(e) {
        return Game.prototype.keyDown.apply(_this, arguments);
      };
      this.drawCells = function() {
        return Game.prototype.drawCells.apply(_this, arguments);
      };
      this.drawScale = function() {
        return Game.prototype.drawScale.apply(_this, arguments);
      };
      document.addEventListener('keydown', this.keyDown, true);
      this.dropping = false;
      this.maxtier = 3;
      this.gtable = document.getElementById('field');
      this.drawCells();
      this.scale = document.getElementById('scale');
      this.drawScale();
      ntable = document.getElementById('next');
      r = document.createElement('tr');
      ntable.appendChild(r);
      c = document.createElement('td');
      r.appendChild(c);
      this.next_1 = new Cell(c);
      r = document.createElement('tr');
      ntable.appendChild(r);
      c = document.createElement('td');
      r.appendChild(c);
      this.next_2 = new Cell(c);
      this.createNext();
      this.newTurn();
    }

    Game.prototype.drawScale = function() {
      var c, i, r, _i, _ref, _results;
      this.scale.innerHTML = "";
      r = document.createElement('tr');
      this.scale.appendChild(r);
      c = document.createElement('td');
      r.appendChild(c);
      c.style.backgroundColor = colors[this.maxtier];
      r = document.createElement('tr');
      this.scale.appendChild(r);
      c = document.createElement('td');
      r.appendChild(c);
      c.style.textAlign = "center";
      c.innerHTML = "^";
      _results = [];
      for (i = _i = _ref = this.maxtier - 1; _ref <= 1 ? _i <= 1 : _i >= 1; i = _ref <= 1 ? ++_i : --_i) {
        r = document.createElement('tr');
        this.scale.appendChild(r);
        c = document.createElement('td');
        r.appendChild(c);
        _results.push(c.style.backgroundColor = colors[i]);
      }
      return _results;
    };

    Game.prototype.drawCells = function() {
      var cell, i, j, row, safetyRow, _i, _j, _ref, _ref1;
      this.cells = [];
      for (i = _i = _ref = this.height + 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        row = document.createElement('tr');
        this.gtable.appendChild(row);
        this.cells[i] = [];
        for (j = _j = 0, _ref1 = this.width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
          cell = document.createElement('td');
          row.appendChild(cell);
          this.cells[i][j] = new Cell(cell);
        }
      }
      safetyRow = this.gtable.childNodes.item(2);
      return safetyRow.style.borderBottom = "2px solid red";
    };

    Game.prototype.keyDown = function(e) {
      var KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_UP;
      KEY_DOWN = 40;
      KEY_UP = 38;
      KEY_LEFT = 37;
      KEY_RIGHT = 39;
      if (this.dropping) {
        return;
      }
      if (e.keyCode === KEY_LEFT) {
        return this.figure.moveLeft();
      } else if (e.keyCode === KEY_RIGHT) {
        return this.figure.moveRight();
      } else if (e.keyCode === KEY_UP) {
        return this.figure.rotate();
      } else if (e.keyCode === KEY_DOWN) {
        this.dropping = true;
        this.figure.clear();
        return this.bringDown();
      }
    };

    Game.prototype.land = function(c, i) {
      var j;
      j = this.height + 1;
      while (j > 0 && this.cells[j - 1][i].isEmpty()) {
        j -= 1;
      }
      this.cells[j][i].set(c);
      return this.critical.push([j, i]);
    };

    Game.prototype.bringDown = function() {
      this.critical = [];
      if (this.figure.state[2]) {
        this.land(this.figure.state[2], this.figure.index);
      }
      this.land(this.figure.state[1], this.figure.index + 1);
      if (this.figure.state[0]) {
        this.land(this.figure.state[0], this.figure.index + 1);
      }
      return this.finalizeTurn();
    };

    Game.prototype.finalizeTurn = function() {
      this.landAll();
      if (this.removeClusters()) {
        this.animationStep = -1;
        return setTimeout(this.animateCollapse, animation_delay);
      } else if (!this.checkOverload()) {
        return this.newTurn();
      }
    };

    Game.prototype.animateCollapse = function() {
      var cs, _i, _len, _ref, _results;
      this.animationStep += 1;
      if (this.animationStep === 4) {
        setTimeout(this.finalizeTurn, animation_delay);
      } else {
        setTimeout(this.animateCollapse, animation_delay);
      }
      _ref = this.clusters;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cs = _ref[_i];
        _results.push(this.collapseCluster(cs, this.animationStep));
      }
      return _results;
    };

    Game.prototype.collapseCluster = function(cs, step) {
      var colmin, i, j, rowmin, _i, _j, _len, _len1, _ref, _ref1, _results;
      rowmin = this.height + 1;
      colmin = this.width - 1;
      for (_i = 0, _len = cs.length; _i < _len; _i++) {
        _ref = cs[_i], i = _ref[0], j = _ref[1];
        if (i < rowmin) {
          rowmin = i;
          colmin = j;
        } else if (i === rowmin && j < colmin) {
          colmin = j;
        }
      }
      _results = [];
      for (_j = 0, _len1 = cs.length; _j < _len1; _j++) {
        _ref1 = cs[_j], i = _ref1[0], j = _ref1[1];
        if (i === rowmin && j === colmin) {
          this.cells[i][j].anim_upgrade(step);
          if (this.cells[i][j].tier > this.maxtier) {
            this.maxtier += 1;
            _results.push(this.drawScale());
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(this.cells[i][j].anim_reset(step));
        }
      }
      return _results;
    };

    Game.prototype.checkOverload = function() {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (!this.cells[this.height][i].isEmpty()) {
          return true;
        }
      }
      return false;
    };

    Game.prototype.landAll = function() {
      var i, j, jmin, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.width - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        jmin = 0;
        while (jmin < this.height + 1 && !this.cells[jmin][i].isEmpty()) {
          jmin += 1;
        }
        if (jmin > this.height) {
          continue;
        }
        j = jmin + 1;
        while (j < this.height + 2) {
          while (j < this.height + 2 && this.cells[j][i].isEmpty()) {
            j += 1;
          }
          if (j > this.height + 1) {
            break;
          }
          while (j < this.height + 2 && !this.cells[j][i].isEmpty()) {
            this.cells[jmin][i].set(this.cells[j][i].tier);
            jmin += 1;
            j += 1;
          }
        }
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = jmin, _ref1 = this.height + 1; jmin <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = jmin <= _ref1 ? ++_j : --_j) {
            _results1.push(this.cells[j][i].reset());
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Game.prototype.removeClusters = function() {
      var cn, co, i, ic, j, jc, jj, maxc, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
      this.clusters = [];
      i = 0;
      j = 0;
      while (j < this.width && this.cells[i][j].isEmpty()) {
        j += 1;
      }
      if (j === this.width) {
        return;
      }
      maxc = 0;
      this.cells[i][j].cluster = maxc;
      this.clusters = [[[i, j]]];
      for (jj = _i = _ref = j + 1, _ref1 = this.width - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; jj = _ref <= _ref1 ? ++_i : --_i) {
        if (!this.cells[i][jj].isEmpty()) {
          if (this.cells[i][jj].tier === this.cells[i][jj - 1].tier) {
            this.cells[i][jj].cluster = this.cells[i][jj - 1].cluster;
            this.clusters[this.cells[i][jj].cluster].push([i, jj]);
          } else {
            maxc += 1;
            this.cells[i][jj].cluster = maxc;
            this.clusters.push([[i, jj]]);
          }
        }
      }
      for (i = _j = 1, _ref2 = this.height + 1; 1 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 1 <= _ref2 ? ++_j : --_j) {
        if (!this.cells[i][0].isEmpty()) {
          if (this.cells[i][0].tier === this.cells[i - 1][0].tier) {
            this.cells[i][0].cluster = this.cells[i - 1][0].cluster;
            this.clusters[this.cells[i][0].cluster].push([i, 0]);
          } else {
            maxc += 1;
            this.cells[i][0].cluster = maxc;
            this.clusters.push([[i, 0]]);
          }
        }
        for (jj = _k = 1, _ref3 = this.width - 1; 1 <= _ref3 ? _k <= _ref3 : _k >= _ref3; jj = 1 <= _ref3 ? ++_k : --_k) {
          if (!this.cells[i][jj].isEmpty()) {
            if (this.cells[i][jj].tier === this.cells[i][jj - 1].tier) {
              this.cells[i][jj].cluster = this.cells[i][jj - 1].cluster;
              this.clusters[this.cells[i][jj].cluster].push([i, jj]);
              if (this.cells[i][jj].tier === this.cells[i - 1][jj].tier) {
                co = this.cells[i - 1][jj].cluster;
                cn = this.cells[i][jj].cluster;
                if (cn !== co) {
                  _ref4 = this.clusters[co];
                  for (_l = 0, _len = _ref4.length; _l < _len; _l++) {
                    _ref5 = _ref4[_l], ic = _ref5[0], jc = _ref5[1];
                    this.clusters[cn].push([ic, jc]);
                    this.cells[ic][jc].cluster = cn;
                  }
                  this.clusters[co] = [];
                }
              }
            } else if (this.cells[i][jj].tier === this.cells[i - 1][jj].tier) {
              this.cells[i][jj].cluster = this.cells[i - 1][jj].cluster;
              this.clusters[this.cells[i][jj].cluster].push([i, jj]);
            } else {
              maxc += 1;
              this.cells[i][jj].cluster = maxc;
              this.clusters.push([[i, jj]]);
            }
          }
        }
      }
      i = 0;
      while (i < this.clusters.length) {
        if (this.clusters[i].length < 3) {
          this.clusters.splice(i, 1);
        } else {
          i += 1;
        }
      }
      return this.clusters.length >= 1;
    };

    Game.prototype.createNext = function() {
      this.nextfigure = [this.randomColor(), this.randomColor()];
      this.next_1.set(this.nextfigure[0]);
      return this.next_2.set(this.nextfigure[1]);
    };

    Game.prototype.randomColor = function() {
      return 1 + Math.floor(Math.random() * (this.maxtier - 1));
    };

    Game.prototype.newTurn = function() {
      this.figure = new Figure(this.nextfigure[0], this.nextfigure[1], this.cells[this.height + 1], this.cells[this.height]);
      this.createNext();
      return this.dropping = false;
    };

    return Game;

  })();

  window.game = new Game(10, 10);

}).call(this);
